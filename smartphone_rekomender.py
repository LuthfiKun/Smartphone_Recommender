# -*- coding: utf-8 -*-
"""Smartphone_Rekomender

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/132YXJDSvDOiH3rVeGFPAb0V53SUDnik-
"""

import pandas as pd
import numpy as np
df_phone = pd.read_csv('Indonesian_Phone_Data_2022.csv')

df_phone.describe()

def sim_fuzzy(new_val, old_val, max, min):
  dist = np.sqrt((new_val - old_val)**2)
  return 1/(1+dist)
  
def sim_crisp(new_val, old_val, weight):
  crisp = []
  for index in old_val.index:
    if old_val[index] == new_val:
      crisp.append(1*weight)
    else:
      crisp.append(0)
  return crisp

def total_sim(memory, internal_storage, os_price, dual_sim, esim,
              memory_slot, fiveG, nfc, body_length, body_width,
              body_thickness, weight, battery, display_type, display_size,
              display_res, refesh_rate, display_hdr):
  sim = []
  total_weight = 0
  if memory != 0:
    weight_memory = 3
    total_weight += weight_memory
    sim.append(sim_fuzzy(memory, df_phone['memory'], df_phone['memory'].max(), df_phone['memory'].min()).apply(lambda x: x*weight_memory))
  if internal_storage != 0:
    weight_internal_storage = 3
    total_weight += weight_internal_storage
    sim.append(sim_fuzzy(internal_storage, df_phone['internal_storage'], df_phone['internal_storage'].max(), df_phone['internal_storage'].min()).apply(lambda x: x*weight_internal_storage))
  if os_price != 0:
    weight_os_price = 6
    total_weight += weight_os_price
    sim.append(sim_fuzzy(os_price, df_phone['os_price'], df_phone['os_price'].max(), df_phone['os_price'].min()).apply(lambda x: x*weight_os_price))
  if dual_sim != 0:
    weight_dual_sim = 2
    total_weight += weight_dual_sim
    sim.append(sim_crisp(dual_sim, df_phone['dual_sim'], weight_dual_sim))
  if esim != 0:
    weight_esim = 1
    total_weight += weight_esim
    sim.append(sim_crisp(esim, df_phone['esim'], weight_esim))
  if fiveG != 0:
    weight_fiveG = 2
    total_weight += weight_fiveG
    sim.append(sim_crisp(fiveG, df_phone['5g'], weight_fiveG))
  if nfc != 0:
    weight_nfc = 1
    total_weight += weight_nfc
    sim.append(sim_crisp(nfc, df_phone['nfc'], weight_nfc))
  if body_length != 0:
    weight_body_length = 2
    total_weight += weight_body_length
    sim.append(sim_fuzzy(body_length, df_phone['body_length'], df_phone['body_length'].max(), df_phone['body_length'].min()).apply(lambda x: x*weight_body_length))
  if body_width != 0:
    weight_body_width = 2
    total_weight += weight_body_width
    sim.append(sim_fuzzy(body_width, df_phone['body_width'], df_phone['body_width'].max(), df_phone['body_width'].min()).apply(lambda x: x*weight_body_width))
  if body_thickness != 0:
    weight_body_thickness = 1
    total_weight += weight_body_thickness
    sim.append(sim_fuzzy(body_thickness, df_phone['body_thickness'], df_phone['body_thickness'].max(), df_phone['body_thickness'].min()).apply(lambda x: x*weight_body_thickness))
  if weight != 0:
    weight_weight = 1
    total_weight += weight_weight
    sim.append(sim_fuzzy(weight, df_phone['weight'], df_phone['weight'].max(), df_phone['weight'].min()).apply(lambda x: x*weight_weight))
  if battery != 0:
    weight_battery = 3
    total_weight += weight_battery
    sim.append(sim_fuzzy(battery, df_phone['battery'], df_phone['battery'].max(), df_phone['battery'].min()).apply(lambda x: x*weight_battery))
  if display_type != 0:
    weight_display_type = 2
    total_weight += weight_display_type
    sim.append(sim_crisp(display_type, df_phone['display_type'], weight_display_type))
  if display_size != 0:
    weight_display_size = 2
    total_weight += weight_display_size
    sim.append(sim_fuzzy(display_size, df_phone['display_size'], df_phone['display_size'].max(), df_phone['display_size'].min()).apply(lambda x: x*weight_display_size))
  if refesh_rate != 0:
    weight_refesh_rate = 1
    total_weight += weight_refesh_rate
    sim.append(sim_fuzzy(refesh_rate, df_phone['refesh_rate'], df_phone['refesh_rate'].max(), df_phone['refesh_rate'].min()).apply(lambda x: x*weight_refesh_rate))
  if display_hdr != 0:
    weight_display_hdr = 1
    total_weight += weight_display_hdr
    sim.append(sim_crisp(display_hdr, df_phone['display_hdr'], weight_display_hdr))
  
  total_sim = 0
  for val in sim:
    total_sim += val

  return total_sim/total_weight

def run(memory, internal_storage, os_price, dual_sim, esim,
        memory_slot, fiveG, nfc, body_length, body_width,
        body_thickness, weight, battery, display_type, display_size,
        display_res, refesh_rate, display_hdr):

  all_sim = total_sim(memory, internal_storage, os_price, dual_sim, esim,
                      memory_slot, fiveG, nfc, body_length, body_width,
                      body_thickness, weight, battery, display_type, display_size,
                      display_res, refesh_rate, display_hdr)

  df_phone['similarity'] = all_sim
  df_phone_sorted = df_phone.sort_values(by='similarity', ascending=False)
  print(df_phone_sorted.head(5))
  return df_phone_sorted.head(5)